{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["type Position3d = {\n  x: number\n  y: number\n  z: number\n};\n\ntype Sprite = {\n  pos: Position3d\n  img: ImageBitmap\n};\n\ntype Position2d = {\n  x: number\n  y: number\n}\n\nconst width = 32;\nconst height = 32;\n\nconst W = 10;\nconst H = 10;\n\nconst sprites: Array<Sprite> = [];\n\n\nconst projectISOtoScreen: (p: Position3d) => Position2d  = p => {\n  return {\n    x: p.x * width * 0.5 - p.y * width * 0.5 - width * 0.5 + W * 0.5 * width,\n    y: 0.25 * p.x * height + 0.25 * p.y * height - p.z * height * 0.5\n  }\n};\n\nconst canvas = <HTMLCanvasElement | null>document.getElementById(\"main\");\nconst image = new Image();\nif (canvas) {\n  const ctx = canvas.getContext(\"2d\");\n\n  if (ctx) {\n    image.onload = async function () {\n      const grass = await createImageBitmap(image, 0, 0, width, height);\n      const cube = await createImageBitmap(image, width, 0, width, height);\n      for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n          sprites.push({\n            pos: {\n              x: i,\n              y: j,\n              z: 0\n            },\n            img: cube\n          });\n        }\n      }\n\n      sprites.push({\n        pos: {\n          x: 3, y: 3, z: 1\n        },\n        img: cube\n      });\n      sprites.push({\n        pos: {\n          x: 3, y: 3, z: 2\n        },\n        img: cube\n      });\n\n      sprites.push({\n        pos: {\n          x: 1, y: 2, z: 1\n        },\n        img: cube\n      });\n\n      sprites.sort((a, b) => {\n        const aProjected = (a.pos.x + a.pos.y);\n        const bProjected = (b.pos.x + b.pos.y);\n        if (aProjected < bProjected) {\n          return -1;\n        } else if (aProjected > bProjected) {\n          return 1;\n        } else {\n          if (a.pos.z < b.pos.z) { return -1 } else { return 1 };\n        }\n      });\n\n      for (let s of sprites) {\n        const projected = projectISOtoScreen(s.pos);\n        ctx.drawImage(s.img, projected.x, projected.y);\n      }\n    };\n  }\n}\n\n// Load the sprite sheet from an image file\nimage.src = 'grass.png';\n"],
  "mappings": ";;AAgBA,MAAM,QAAQ;AACd,MAAM,SAAS;AAEf,MAAM,IAAI;AAGV,MAAM,UAAyB;AAG/B,MAAM,qBAAqD,OAAK;AAC9D,WAAO;AAAA,MACL,GAAG,EAAE,IAAI,QAAQ,MAAM,EAAE,IAAI,QAAQ,MAAM,QAAQ,MAAM,IAAI,MAAM;AAAA,MACnE,GAAG,OAAO,EAAE,IAAI,SAAS,OAAO,EAAE,IAAI,SAAS,EAAE,IAAI,SAAS;AAAA;AAAA;AAIlE,MAAM,SAAmC,SAAS,eAAe;AACjE,MAAM,QAAQ,IAAI;AAClB,MAAI,QAAQ;AACV,UAAM,MAAM,OAAO,WAAW;AAE9B,QAAI,KAAK;AACP,YAAM,SAAS,iBAAkB;AAC/B,cAAM,QAAQ,MAAM,kBAAkB,OAAO,GAAG,GAAG,OAAO;AAC1D,cAAM,OAAO,MAAM,kBAAkB,OAAO,OAAO,GAAG,OAAO;AAC7D,iBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,mBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,oBAAQ,KAAK;AAAA,cACX,KAAK;AAAA,gBACH,GAAG;AAAA,gBACH,GAAG;AAAA,gBACH,GAAG;AAAA;AAAA,cAEL,KAAK;AAAA;AAAA;AAAA;AAKX,gBAAQ,KAAK;AAAA,UACX,KAAK;AAAA,YACH,GAAG;AAAA,YAAG,GAAG;AAAA,YAAG,GAAG;AAAA;AAAA,UAEjB,KAAK;AAAA;AAEP,gBAAQ,KAAK;AAAA,UACX,KAAK;AAAA,YACH,GAAG;AAAA,YAAG,GAAG;AAAA,YAAG,GAAG;AAAA;AAAA,UAEjB,KAAK;AAAA;AAGP,gBAAQ,KAAK;AAAA,UACX,KAAK;AAAA,YACH,GAAG;AAAA,YAAG,GAAG;AAAA,YAAG,GAAG;AAAA;AAAA,UAEjB,KAAK;AAAA;AAGP,gBAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,gBAAM,aAAc,EAAE,IAAI,IAAI,EAAE,IAAI;AACpC,gBAAM,aAAc,EAAE,IAAI,IAAI,EAAE,IAAI;AACpC,cAAI,aAAa,YAAY;AAC3B,mBAAO;AAAA,qBACE,aAAa,YAAY;AAClC,mBAAO;AAAA,iBACF;AACL,gBAAI,EAAE,IAAI,IAAI,EAAE,IAAI,GAAG;AAAE,qBAAO;AAAA,mBAAU;AAAE,qBAAO;AAAA;AAAG;AAAA;AAAA;AAI1D,iBAAS,KAAK,SAAS;AACrB,gBAAM,YAAY,mBAAmB,EAAE;AACvC,cAAI,UAAU,EAAE,KAAK,UAAU,GAAG,UAAU;AAAA;AAAA;AAAA;AAAA;AAOpD,QAAM,MAAM;",
  "names": []
}
